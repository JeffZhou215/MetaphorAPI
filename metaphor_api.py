# Author: Jeff Zhou
# Email: yz193@rice.edu
import requests
from metaphor_python import Metaphor
metaphor = Metaphor("309a2def-30e7-4b57-b423-322f15cdea31")

# This program will provide related topics/links based off the topics user entered seperated by ","
# Users can choose keep going with the results generated by the api or start a new search or quit.
def recommend_content(user_topics):
    while True:
        topics = user_topics.split(",")
        
        for topic in topics:
            # Step 1: Perform a search based on the user's topic
            search_response = metaphor.search(topic.strip(), num_results=5)
            
            if not search_response.results:
                print(f"No search results found for topic '{topic}'.")
                continue
            
            # Step 2: Find similar links to the first search result
            first_result = search_response.results[0]
            similar_response = metaphor.find_similar(first_result.url, num_results=5)
            
            if not similar_response.results:
                print(f"No similar links found for topic '{topic}'.")
                continue
            
            # Get the document IDs from similar_links
            document_ids = [link.id for link in similar_response.results]
            
            # Step 3: Get the contents of the similar links using document IDs
            content_response = metaphor.get_contents(document_ids)
            
            # Display the recommended content for the topic
            print(f"Recommended content for topic '{topic}':")
            for i, document_content in enumerate(content_response.contents):
                print(f"{i + 1}. Title: {document_content.title}")
                print(f"   URL: {document_content.url}")
                # print(f"   Extract: {document_content.extract}") NOTE: extract is including HTML markup.
                print("\n")
            
            # Allow the user to pick a result, start a new search, or search related content
            while True:
                choice = input(
                    "Enter the number of the result to continue searching (N for new search, R for related, or 'Q' to quit): "
                ).lower()
                if choice == 'q':
                    return
                if choice == 'n':
                    user_topics = input("Enter new topics of interest (separated by commas): ")
                    break
                if choice == 'r':
                    break  # Continue with the current topics
                try:
                    choice_index = int(choice) - 1
                    if 0 <= choice_index < len(content_response.contents):
                        # Update the search topic to the chosen result's title
                        user_topics = content_response.contents[choice_index].title
                        break
                    else:
                        print("Invalid choice. Please enter a valid result number, 'N' for a new search, 'R' for related, or 'Q' to quit.")
                except ValueError:
                    print("Invalid input. Please enter a valid result number, 'N' for a new search, 'R' for related, or 'Q' to quit.")

if __name__ == "__main__":
    user_topics = input("Enter topics of interest (separated by commas): ")
    recommend_content(user_topics)
